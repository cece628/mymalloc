#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define malloc(x) mymalloc(x)
#define free(x) myfree(x)

int *mymalloc(int size);
int myblock[5000];
char saved_names[100][20],name[20];
int cnt1,cnt2,x,total,pos,available1,available2,temp;
int saved_sizes[100],saved_pos[100][2];
void myfree(int *p);

int main()
{
    int res,size,ch,j,i;
    int *p;
    cnt1=0;
    cnt2=0;
    total=5000;
    available1=2500;
    available2=2500;
    for(i=0;i<5000;i++)
       myblock[i]=0;
    x=-1;
    do
    {
         printf("Choose an action:\n1.Allocate Memory\n2.View Tables\n3.Free Memory\n4.Exit\nYour Choice:");
         scanf("%d",&ch);
         switch(ch)
         {
                   case 1:x=x+1;
                          printf("Enter table name:");
                          scanf("%s",name);
                          strcpy(saved_names[x],name);
                          printf("Enter size:");
                          scanf("%d",&size);
                          saved_sizes[x]=size;
                          p=malloc(size);
/*                          printf("\nWhats inside is:");
                          if(size<100){
                          for(i=pos;i<pos+size;i++)
                             printf("pos[%d]=%d",i,*(p+i));
                          printf("\n");
                          }
                          else{
                          for(i=pos;i>pos-size;i--)
                             printf("pos[%d]=%d",i,*(p+i));
                          printf("\n");
                          }
*/
                          if(size<100)
                             cnt1=cnt1+size; 
                          else
                             cnt2=cnt2+size;  
                          printf("Table created!\n");
                          break;
                   case 2:
                          printf("Your tables:\n");
                          for(j=0;j<=x;j++)
                             if(saved_sizes[j]!=0)
                                printf("%s with size:%d saved between %d and %d\n",saved_names[j],saved_sizes[j],saved_pos[j][0],saved_pos[j][1]);
                          break;
                   case 3:printf("Enter table's name you want to free:");
                          scanf("%s",name);
                          p=myblock;
                          temp=-1;
                          for(i=0;i<10;i++){
                             res=strcmp(saved_names[i],name);
                             if(res==0)
                             {
                                temp=i;
                                p=p+saved_pos[i][0];
                             }
                          }
                          free(p);
                          break;
                   case 4:printf("Bye...");
                          break;
                   default:printf("Try again\n");
                          break;                                      
         }        
    }while(ch!=4);
    return 0;
}                 
                          
int *mymalloc(int size)
{
    int *c;
    int i;
    int cnt_temp;
    c=myblock;
    if(size>total){
        printf("Sorry not enough available memory");
        exit(1);}
    else if(((size>100) && (size>available1)) || ((size<100) && (size>available2))){
         printf("Sorry not enough memory left");
         exit(2);} 
    else
        if(size<100){
                    cnt_temp=0;
                    pos=cnt_temp+cnt1;
                    saved_pos[x][0]=pos;
                    saved_pos[x][1]=pos+size-1;
                    for(i=pos;i<(pos+size);i++)
                       *(c+i)=1;  
                    available1=available1-size;                   
                    return c;
                    }
        else{
                    cnt_temp=4999;
                    pos=cnt_temp-cnt2;
                    saved_pos[x][0]=pos;
                    saved_pos[x][1]=pos-size;
                    for(i=pos;i>(pos-size);i--)
                       myblock[i]=1;
                    available2=available2-size;
                    return c;
            }
} 

void myfree(int *p)
{
     int i,flag;
     flag=0;
     if(temp==-1)
        printf("There is no such array\n");
     else
     {
     if(saved_sizes[temp]<100)
     {
        for(i=saved_pos[temp][0];i<=saved_pos[temp][1];i++)
        {
            if(*(p+i)==1){
               *(p+i)=0;
               flag=1;}
            else
            {
               printf("Memory is already free\n");
               break;
            } 
        }
        saved_sizes[temp]=0;
     }
     else
     {
        for(i=saved_pos[temp][0];i>=saved_pos[temp][1];i--)
        {
            if(*(p+i)==1){
               *(p+i)=0;
               flag=1;}
            else
            {
               printf("Memory is already free\n"); 
               break;
            }
        }
        saved_sizes[temp]=0;
     }   
     }   
     if(flag==1)
        printf("Memory has been freed\n");
}
     
